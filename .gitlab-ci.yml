# PIPELINE STAGES
stages:
  - temp-build
  - dockerize
  - deploy
  - update-backend-url
  - rebuild-final

# VARIABLES
variables:
  ECR_REPO: "wtas-api"
  IMAGE_TAG: "latest"
  AWS_ACCOUNT_ID: "643989280406"
  DOCKER_DRIVER: overlay2

before_script: "echo 'Using AWS region: $AWS_DEFAULT_REGION'"

# TEMPORARY REACT BUILD (will be replaced later)
build_react_temp:
  stage: temp-build
  image: node:18-alpine
  script:
    - cd client
    - "echo 'TEMP: React build with possibly outdated backend URL'"
    - echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" > .env
    - cat .env  # Debug print to verify the value
    - npm install --no-audit
    - NODE_OPTIONS=--openssl-legacy-provider npm run build
  artifacts:
    paths:
      - client/build

# DOCKERIZE BACKEND
docker_build_push:
  stage: dockerize
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install awscli
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set region "$AWS_DEFAULT_REGION"
    - aws ecr get-login-password | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    - docker build -t "$ECR_REPO:$IMAGE_TAG" .
    - docker tag "$ECR_REPO:$IMAGE_TAG" "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG"
    - docker push "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG"

# DEPLOY WITH TERRAFORM
deploy_to_aws:
  stage: deploy
  image: 
    name: hashicorp/terraform:1.5.7
    entrypoint: [""]
  script:
    - cd terraform
    - apk add --no-cache python3 py3-pip aws-cli
    - aws configure set region "$AWS_DEFAULT_REGION"
    - terraform init -upgrade
    - terraform apply -auto-approve

# UPDATE REACT BACKEND URL (AFTER ALB DEPLOY)
update_backend_url:
  stage: update-backend-url
  image: amazonlinux
  before_script:
    - yum install -y curl jq unzip --allowerasing
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - |
      echo "Fetching Load Balancer DNS..."
      lb_dns=$(aws elbv2 describe-load-balancers \
        --names "wtas-lb" \
        --region "$AWS_DEFAULT_REGION" \
        | jq -r '.LoadBalancers[0].DNSName')

      echo "Updating GitLab variable REACT_APP_BACKEND_URL to http://$lb_dns"

      curl --request PUT "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/REACT_APP_BACKEND_URL" \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --form "value=http://$lb_dns"

# FINAL REACT BUILD WITH CORRECT BACKEND URL
rebuild_react_final:
  stage: rebuild-final
  image: node:18-alpine
  script:
    - cd client
    - echo "FINAL React build with updated backend URL"
    - echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" > .env
    - cat .env  # Debug print to verify the value
    - npm install --no-audit
    - NODE_OPTIONS=--openssl-legacy-provider npm run build
  artifacts:
    paths:
      - client/build