stages:
  - build
  - dockerize
  - deploy

variables:
  ECR_REPO: "wtas-api"
  IMAGE_TAG: "latest"
  AWS_ACCOUNT_ID: "643989280406"
  DOCKER_DRIVER: overlay2
  LB_ARN: "arn:aws:elasticloadbalancing:ca-central-1:643989280406:loadbalancer/app/wtas-lb/4321f7795b172e5a"

before_script: "echo 'Using AWS region: $AWS_DEFAULT_REGION'"

build_react:
  stage: build
  image: node:18-alpine
  script:
    - cd client
    - echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" > .env
    - npm config set registry https://registry.npmjs.org/
    - npm install --no-audit
    - NODE_OPTIONS=--openssl-legacy-provider npm run build
  artifacts:
    paths:
      - client/build

docker_build_push:
  stage: dockerize
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install awscli
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set region "$AWS_DEFAULT_REGION"
    - aws ecr get-login-password | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    - docker build -t "$ECR_REPO:$IMAGE_TAG" .
    - docker tag "$ECR_REPO:$IMAGE_TAG" "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG"
    - docker push "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG"

deploy_to_aws:
  stage: deploy
  image: 
    name: hashicorp/terraform:1.5.7
    entrypoint: [""]
  script:
    - cd terraform
    # Install AWS CLI (since it's not in the Terraform image)
    - apk add --no-cache python3 py3-pip aws-cli
    - aws configure set region "$AWS_DEFAULT_REGION"
    # Initialize Terraform to ensure correct dependencies
    - terraform init -upgrade
    # Apply Terraform configuration to create the new resources, including load balancer
    - terraform apply -auto-approve